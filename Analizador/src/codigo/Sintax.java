
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 22 17:34:18 CST 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 22 17:34:18 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\011\000\002\002" +
    "\012\000\002\003\005\000\002\003\007\000\002\003\005" +
    "\000\002\003\007\000\002\003\005\000\002\003\007\000" +
    "\002\003\007\000\002\003\010\000\002\003\010\000\002" +
    "\003\010\000\002\003\011\000\002\003\011\000\002\003" +
    "\010\000\002\003\010\000\002\003\010\000\002\003\010" +
    "\000\002\003\011\000\002\003\011\000\002\003\011\000" +
    "\002\003\010\000\002\003\011\000\002\003\011\000\002" +
    "\003\010\000\002\003\010\000\002\003\010\000\002\003" +
    "\016\000\002\003\016\000\002\003\012\000\002\003\016" +
    "\000\002\003\016\000\002\003\012\000\002\003\016\000" +
    "\002\003\016\000\002\003\014\000\002\003\014\000\002" +
    "\003\011\000\002\003\014\000\002\003\014\000\002\003" +
    "\014\000\002\003\014\000\002\003\011\000\002\003\011" +
    "\000\002\003\007\000\002\003\012\000\002\003\032" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\004\004\004\001\002\000\004\033\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\027\010\001\002\000\004\030\011\001\002\000" +
    "\004\031\012\001\002\000\030\004\023\005\026\006\014" +
    "\007\020\013\017\014\016\015\021\017\013\020\025\021" +
    "\015\036\024\001\002\000\004\027\332\001\002\000\004" +
    "\036\317\001\002\000\004\027\270\001\002\000\004\027" +
    "\263\001\002\000\004\027\255\001\002\000\010\004\240" +
    "\005\236\006\237\001\002\000\004\027\102\001\002\000" +
    "\032\004\023\005\026\006\014\007\020\013\017\014\016" +
    "\015\021\017\013\020\025\021\015\032\100\036\024\001" +
    "\002\000\004\036\064\001\002\000\004\022\045\001\002" +
    "\000\004\027\036\001\002\000\004\036\027\001\002\000" +
    "\006\022\031\034\030\001\002\000\032\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\013\ufffa\014\ufffa\015\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\032\ufffa\036\ufffa\001\002\000\006\036\033" +
    "\037\032\001\002\000\004\034\035\001\002\000\004\034" +
    "\034\001\002\000\032\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\032" +
    "\ufff8\036\ufff8\001\002\000\032\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\013\ufff9\014\ufff9\015\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\032\ufff9\036\ufff9\001\002\000\004\036\037\001\002" +
    "\000\004\034\040\001\002\000\004\005\041\001\002\000" +
    "\004\036\042\001\002\000\004\030\043\001\002\000\004" +
    "\034\044\001\002\000\032\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\032\uffd3\036\uffd3\001\002\000\006\037\046\040\047\001" +
    "\002\000\006\023\057\024\056\001\002\000\006\023\050" +
    "\024\051\001\002\000\004\040\054\001\002\000\004\037" +
    "\052\001\002\000\004\034\053\001\002\000\032\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\013\uffef\014\uffef\015\uffef\017" +
    "\uffef\020\uffef\021\uffef\032\uffef\036\uffef\001\002\000\004" +
    "\034\055\001\002\000\032\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\032\ufff0\036\ufff0\001\002\000\004\037\062\001\002\000" +
    "\004\037\060\001\002\000\004\034\061\001\002\000\032" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\032\ufff2\036\ufff2\001\002" +
    "\000\004\034\063\001\002\000\032\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\032\ufff1\036\ufff1\001\002\000\006\022\066\034" +
    "\065\001\002\000\032\004\ufffe\005\ufffe\006\ufffe\007\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\017\ufffe\020\ufffe\021\ufffe\032" +
    "\ufffe\036\ufffe\001\002\000\004\037\067\001\002\000\010" +
    "\023\070\024\071\034\072\001\002\000\004\037\075\001" +
    "\002\000\004\037\073\001\002\000\032\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\013\ufffd\014\ufffd\015\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\032\ufffd\036\ufffd\001\002\000\004\034\074" +
    "\001\002\000\032\004\ufff3\005\ufff3\006\ufff3\007\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\032\ufff3" +
    "\036\ufff3\001\002\000\004\034\076\001\002\000\032\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\032\ufff4\036\ufff4\001\002\000" +
    "\004\032\101\001\002\000\004\002\000\001\002\000\004" +
    "\002\uffff\001\002\000\006\012\104\037\103\001\002\000" +
    "\010\022\127\025\125\026\126\001\002\000\004\037\105" +
    "\001\002\000\010\022\110\025\106\026\107\001\002\000" +
    "\006\022\121\037\120\001\002\000\006\022\114\037\113" +
    "\001\002\000\004\037\111\001\002\000\004\030\112\001" +
    "\002\000\032\004\uffd5\005\uffd5\006\uffd5\007\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\032\uffd5\036" +
    "\uffd5\001\002\000\004\030\117\001\002\000\004\037\115" +
    "\001\002\000\004\030\116\001\002\000\032\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\032\uffe0\036\uffe0\001\002\000\032\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\032\uffd6\036\uffd6\001\002\000" +
    "\004\030\124\001\002\000\004\037\122\001\002\000\004" +
    "\030\123\001\002\000\032\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\032\uffe3\036\uffe3\001\002\000\032\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\032\uffdb\036\uffdb\001\002\000\006\022\174\037" +
    "\173\001\002\000\006\022\133\037\132\001\002\000\004" +
    "\037\130\001\002\000\004\030\131\001\002\000\032\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\032\uffe6\036\uffe6\001\002\000" +
    "\010\010\152\011\153\030\154\001\002\000\004\037\134" +
    "\001\002\000\010\010\135\011\136\030\137\001\002\000" +
    "\004\037\145\001\002\000\004\037\140\001\002\000\032" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\032\uffe9\036\uffe9\001\002" +
    "\000\004\025\141\001\002\000\004\022\142\001\002\000" +
    "\004\037\143\001\002\000\004\030\144\001\002\000\032" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\013\uffde\014\uffde\015" +
    "\uffde\017\uffde\020\uffde\021\uffde\032\uffde\036\uffde\001\002" +
    "\000\004\025\146\001\002\000\004\022\147\001\002\000" +
    "\004\037\150\001\002\000\004\030\151\001\002\000\032" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\032\uffdf\036\uffdf\001\002" +
    "\000\004\037\164\001\002\000\004\037\155\001\002\000" +
    "\032\004\uffe7\005\uffe7\006\uffe7\007\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\017\uffe7\020\uffe7\021\uffe7\032\uffe7\036\uffe7\001" +
    "\002\000\006\025\156\026\157\001\002\000\004\037\162" +
    "\001\002\000\004\037\160\001\002\000\004\030\161\001" +
    "\002\000\032\004\uffd9\005\uffd9\006\uffd9\007\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\032\uffd9\036" +
    "\uffd9\001\002\000\004\030\163\001\002\000\032\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\013\uffdc\014\uffdc\015\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\032\uffdc\036\uffdc\001\002\000\006" +
    "\025\165\026\166\001\002\000\004\037\171\001\002\000" +
    "\004\037\167\001\002\000\004\030\170\001\002\000\032" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\013\uffda\014\uffda\015" +
    "\uffda\017\uffda\020\uffda\021\uffda\032\uffda\036\uffda\001\002" +
    "\000\004\030\172\001\002\000\032\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\032\uffdd\036\uffdd\001\002\000\010\010\223\011" +
    "\224\030\225\001\002\000\004\037\175\001\002\000\010" +
    "\010\176\011\177\030\200\001\002\000\004\037\212\001" +
    "\002\000\004\037\201\001\002\000\032\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\013\uffea\014\uffea\015\uffea\017\uffea\020" +
    "\uffea\021\uffea\032\uffea\036\uffea\001\002\000\006\025\202" +
    "\026\203\001\002\000\004\022\207\001\002\000\004\022" +
    "\204\001\002\000\004\037\205\001\002\000\004\030\206" +
    "\001\002\000\032\004\uffe1\005\uffe1\006\uffe1\007\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\032\uffe1" +
    "\036\uffe1\001\002\000\004\037\210\001\002\000\004\030" +
    "\211\001\002\000\032\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\032" +
    "\uffe4\036\uffe4\001\002\000\006\025\213\026\214\001\002" +
    "\000\004\022\220\001\002\000\004\022\215\001\002\000" +
    "\004\037\216\001\002\000\004\030\217\001\002\000\032" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\032\uffe2\036\uffe2\001\002" +
    "\000\004\037\221\001\002\000\004\030\222\001\002\000" +
    "\032\004\uffe5\005\uffe5\006\uffe5\007\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\017\uffe5\020\uffe5\021\uffe5\032\uffe5\036\uffe5\001" +
    "\002\000\004\037\232\001\002\000\004\037\226\001\002" +
    "\000\032\004\uffe8\005\uffe8\006\uffe8\007\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\032\uffe8\036\uffe8" +
    "\001\002\000\004\026\227\001\002\000\004\037\230\001" +
    "\002\000\004\030\231\001\002\000\032\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\032\uffd7\036\uffd7\001\002\000\004\026\233" +
    "\001\002\000\004\037\234\001\002\000\004\030\235\001" +
    "\002\000\032\004\uffd8\005\uffd8\006\uffd8\007\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\032\uffd8\036" +
    "\uffd8\001\002\000\004\036\251\001\002\000\004\036\245" +
    "\001\002\000\004\036\241\001\002\000\004\022\242\001" +
    "\002\000\004\037\243\001\002\000\004\034\244\001\002" +
    "\000\032\004\ufff7\005\ufff7\006\ufff7\007\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7\032\ufff7\036\ufff7" +
    "\001\002\000\004\022\246\001\002\000\004\040\247\001" +
    "\002\000\004\034\250\001\002\000\032\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\013\ufff6\014\ufff6\015\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\032\ufff6\036\ufff6\001\002\000\004\022\252" +
    "\001\002\000\004\036\253\001\002\000\004\034\254\001" +
    "\002\000\032\004\ufff5\005\ufff5\006\ufff5\007\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5\032\ufff5\036" +
    "\ufff5\001\002\000\004\036\256\001\002\000\004\034\257" +
    "\001\002\000\004\036\260\001\002\000\004\030\261\001" +
    "\002\000\004\034\262\001\002\000\032\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\013\uffec\014\uffec\015\uffec\017\uffec\020" +
    "\uffec\021\uffec\032\uffec\036\uffec\001\002\000\004\036\264" +
    "\001\002\000\004\034\265\001\002\000\004\037\266\001" +
    "\002\000\004\030\267\001\002\000\032\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\032\uffeb\036\uffeb\001\002\000\004\004\271" +
    "\001\002\000\004\034\272\001\002\000\004\006\273\001" +
    "\002\000\004\036\274\001\002\000\004\030\275\001\002" +
    "\000\004\034\276\001\002\000\004\021\277\001\002\000" +
    "\004\027\300\001\002\000\004\006\301\001\002\000\004" +
    "\034\302\001\002\000\004\004\303\001\002\000\004\036" +
    "\304\001\002\000\004\030\305\001\002\000\004\034\306" +
    "\001\002\000\004\021\307\001\002\000\004\027\310\001" +
    "\002\000\004\005\311\001\002\000\004\034\312\001\002" +
    "\000\004\004\313\001\002\000\004\036\314\001\002\000" +
    "\004\030\315\001\002\000\004\034\316\001\002\000\032" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\032\uffd2\036\uffd2\001\002" +
    "\000\006\022\321\034\320\001\002\000\032\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\013\ufffc\014\ufffc\015\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\032\ufffc\036\ufffc\001\002\000\004\040" +
    "\322\001\002\000\010\023\323\024\324\034\325\001\002" +
    "\000\004\040\330\001\002\000\004\040\326\001\002\000" +
    "\032\004\ufffb\005\ufffb\006\ufffb\007\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\017\ufffb\020\ufffb\021\ufffb\032\ufffb\036\ufffb\001" +
    "\002\000\004\034\327\001\002\000\032\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\013\uffed\014\uffed\015\uffed\017\uffed\020" +
    "\uffed\021\uffed\032\uffed\036\uffed\001\002\000\004\034\331" +
    "\001\002\000\032\004\uffee\005\uffee\006\uffee\007\uffee\013" +
    "\uffee\014\uffee\015\uffee\017\uffee\020\uffee\021\uffee\032\uffee" +
    "\036\uffee\001\002\000\004\036\333\001\002\000\004\030" +
    "\334\001\002\000\004\034\335\001\002\000\032\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\013\uffd4\014\uffd4\015\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\032\uffd4\036\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= Cambiar Parentesis_ap ent Punto_c flot Identificador Parentesis_c Punto_c Cambiar Parentesis_ap flot Punto_c ent Identificador Parentesis_c Punto_c Cambiar Parentesis_ap car Punto_c ent Identificador Parentesis_c Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-23)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= Escribir Parentesis_ap Identificador Punto_c car Identificador Parentesis_c Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= Imprimir Parentesis_ap Identificador Parentesis_c Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= Si Parentesis_ap NOT Numero Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= Si Parentesis_ap NOT Numero MenorQ Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= Si Parentesis_ap Numero MayorQ Numero OR Numero MenorQ Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= Si Parentesis_ap Numero MayorQ Numero AND Numero MenorQ Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= Si Parentesis_ap Numero MenorQ Numero OR Numero MenorQ Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= Si Parentesis_ap Numero MenorQ Numero AND Numero MenorQ Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= Si Parentesis_ap NOT Numero MayorQ Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= Si Parentesis_ap Numero MenorQ Numero OR Numero MayorQ Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= Si Parentesis_ap Numero MenorQ Numero AND Numero MayorQ Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= Si Parentesis_ap Numero MenorQ Igual Numero OR Numero MayorQ Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= Si Parentesis_ap Numero MenorQ Igual Numero AND Numero MayorQ Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= Si Parentesis_ap NOT Numero MenorQ Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= Si Parentesis_ap Numero MayorQ Igual Numero OR Numero MenorQ Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= Si Parentesis_ap Numero MayorQ Igual Numero AND Numero MenorQ Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= Si Parentesis_ap NOT Numero MayorQ Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= Si Parentesis_ap Numero MayorQ Igual Numero OR Numero MayorQ Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= Si Parentesis_ap Numero MayorQ Igual Numero AND Numero MayorQ Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= Si Parentesis_ap Numero Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= Si Parentesis_ap Numero MenorQ Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= Si Parentesis_ap Numero MayorQ Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= Si Parentesis_ap Numero MenorQ Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= Si Parentesis_ap Numero MayorQ Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= Para Parentesis_ap Identificador Punto_c Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= CONCA Parentesis_ap Identificador Punto_c Identificador Parentesis_c Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= flot Identificador Igual NumeroD Menos NumeroD Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= flot Identificador Igual NumeroD Mas NumeroD Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= Identificador Igual NumeroD Menos Numero Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= Identificador Igual NumeroD Mas NumeroD Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= Identificador Igual Numero Menos Numero Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= Identificador Igual Numero Mas Numero Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= ent Identificador Igual Numero Menos Numero Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= ent Identificador Igual Numero Mas Numero Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= consta car Identificador Igual Identificador Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= consta flot Identificador Igual NumeroD Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= consta ent Identificador Igual Numero Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= car Identificador Igual Identificador Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= car Identificador Igual Numero Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= car Identificador Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= flot Identificador Igual NumeroD Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= flot Identificador Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= ent Identificador Igual Numero Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= ent Identificador Punto_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= ent Main Parentesis_ap Parentesis_c Llave_ap SENTENCIA SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ent Main Parentesis_ap Parentesis_c Llave_ap SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

